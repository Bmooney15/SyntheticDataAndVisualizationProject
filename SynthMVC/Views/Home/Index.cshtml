@{
    ViewBag.Title = "Home";
}

<head>
    <meta charset="utf-8">
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <style type="text/css">

        /* Legend Font Style */
        body {
            font: 11px sans-serif;
            background-color: #ffffff;
        }

        /* Legend Position Style */
        .legend {
            position: absolute;
            left: 440px;
            top: 80px;
        }
        #map {
            width: 50%;
            float: left
        }
        #mapGenerated {
            margin-left: 50%
        }
        .axis text {
            font: 10px sans-serif;
        }

        .axis line, .axis path, .axis pathGen {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        
    </style>
</head>

<div id="map">Census Data</div>
<div id="mapGenerated">Generated Data</div>
<select id="selectButton"></select>

    <script type="text/javascript">
        // write your d3 code here..
        // src https://bl.ocks.org/wboykinm/dbbe50d1023f90d4e241712395c27fb3
        //Width and height of map
        var width = 560;
        var height = 400;

        var lowColor = '#f9f9f9'
        var highColor = '#bc2a66'

        // D3 Projection
        var projection = d3.geoAlbersUsa()
            .translate([width / 2, height / 2]) // translate to center of screen
            .scale([700]); // scale things down so see entire US

        // Define path generator
        var path = d3.geoPath() // path generator that will convert GeoJSON to SVG paths
            .projection(projection); // tell path generator to use albersUsa projection

        //Create SVG element and append map to the SVG
        var svg = d3.select("#map")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        var dropDownVars = ["Percent of Population", "Percent Race White", "Percent Race Black", "Percent Race American Indian Or Alaskan", "Percent Race Asian", "Percent Race Native Hawaiian Or Pacific Islander", "Percent Race Other",
            "Percent Race White And Black", "Percent Race White And American Indian Or Alaskan", "Percent Race White And Asian", "Percent Race Black And American Indian Or Alaskan"]
        var allGroup = ["Population", "TotalRaceWhite", "TotalRaceBlack", "TotalRaceAmericanIndianOrAlaskan", "TotalRaceAsian", "TotalRaceNativeHawaiianOrPacificIslander", "TotalRaceOther",
            "TotalRaceWhiteAndBlack", "TotalRaceWhiteAndAmericanIndianOrAlaskan", "TotalRaceWhiteAndAsian", "TotalRaceBlackAndAmericanIndianOrAlaskan"];
        var censusVars = ["Population", "PercentRaceWhite", "PercentRaceBlack", "PercentRaceAmericanIndianOrAlaskan", "PercentRaceAsian", "PercentRaceNativeHawaiianOrPacificIslander", "PercentRaceOther",
            "PercentRaceWhiteAndBlack", "PercentRaceWhiteAndAmericanIndianOrAlaskan", "PercentRaceWhiteAndAsian", "PercentRaceBlackAndAmericanIndianOrAlaskan"];

        // add the options to the button
        d3.select("#selectButton")
            .selectAll('myOptions')
            .data(dropDownVars)
            .enter()
            .append('option')
            .text(function (d) { return d; }) // text showed in the menu
            .attr("value", function (d) { return d; }) // corresponding value returned by the button

        // D3 Projection
        var projectionGen = d3.geoAlbersUsa()
            .translate([width / 2, height / 2]) // translate to center of screen
            .scale([700]); // scale things down so see entire US
        // Define path generator
        var pathGen = d3.geoPath() // path generator that will convert GeoJSON to SVG paths
            .projection(projectionGen); // tell path generator to use albersUsa projection

        //Create SVG element and append map to the SVG
        var svgGen = d3.select("#mapGenerated")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        // A function that update the chart
        function update(selectedGroup) {
            var selectionIndex = dropDownVars.indexOf(selectedGroup); 

            // Load in my states data!
            d3.json("/People/GenerateAndDisplay", function (data) {
                var dataArray = [];
                var temp = selectedGroup;

                for (var d = 0; d < data.length; d++) {
                    dataArray.push(parseFloat(data[d][censusVars[selectionIndex]]))
                }
                var minVal = d3.min(dataArray)
                var maxVal = d3.max(dataArray)
                var ramp = d3.scaleLinear().domain([minVal, maxVal]).range([lowColor, highColor])


                // Load GeoJSON data and merge with states data
                d3.json("../Content/us-states.json", function (json) {
                    var totalPop = 0;
                    // Loop through each state data value in the .csv file
                    for (var i = 0; i < data.length; i++) {
                        var temp2 = selectedGroup;
                        // Grab State Name
                        var dataState = data[i].State;
                        // Add state's population to total US population count
                        totalPop = totalPop + data[i].Population;
                        // Grab data value
                        var dataValue = data[i][censusVars[selectionIndex]];

                        // Find the corresponding state inside the GeoJSON
                        for (var j = 0; j < json.features.length; j++) {
                            var jsonState = json.features[j].id;

                            if (dataState == jsonState) {

                                // Copy the data value into the JSON
                                json.features[j].properties.value = dataValue;

                                // Stop looking through the JSON
                                break;
                            }
                        }
                    }
                    var Tooltip = d3.select("#map")
                        .append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 1)
                        .style("background-color", "white")
                        .style("border", "solid")
                        .style("border-width", "1px")
                        .style("border-radius", "5px")
                        .style("padding", "5px")

                    // Three function that change the tooltip when user hover / move / leave a cell
                    var temp3 = selectedGroup;
                    var mouseover = function (d) {
                        Tooltip.style("opacity", 1)
                    }
                    var mousemove = function (d) {
                        var selected = d3.select("#selectButton").property("value")
                        if (selected == "Percent of Population") {
                            Tooltip
                                .html(d.properties.name + "<br> " + selected + ": " + (((d.properties.value / totalPop) * 100).toFixed(2) + "%"))
                                .style("left", (d3.mouse(this)[0] + 190) + "px")
                                .style("top", (d3.mouse(this)[1] - 5) + "px")
                        }
                        else if (selected != "Percent of Population") {
                            Tooltip
                                .html(d.properties.name + "<br> " + selected + ": " + ((d.properties.value).toFixed(2) + "%"))
                                .style("left", (d3.mouse(this)[0] + 190) + "px")
                                .style("top", (d3.mouse(this)[1] - 5) + "px")
                        }
                        
                    }
                    var mouseleave = function (d) {
                        Tooltip.style("opacity", 0)
                    }
                    // Bind the data to the SVG and create one path per GeoJSON feature
                    svg.selectAll("pathCensus")
                        .data(json.features)
                        .enter()
                        .append("path")
                        .attr("d", path)
                        .style("stroke", "#fff")
                        .style("stroke-width", "1")
                        .style("fill", function (d) {
                            
                                return ramp(d.properties.value)
                            
                        })
                        .on("mouseover", mouseover)
                        .on("mousemove", mousemove)
                        .on("mouseleave", mouseleave);


                });
            });

            // Load in my synthetic states data!
            d3.json("/People/CalculateSyntheticDataStats", function (data) {
                var dataArray = [];
                var dataArrayPercent = [];
                var totalPopInit = 0;
                for (var d = 0; d < data.length; d++) {
                    dataArray.push(parseFloat(data[d][allGroup[selectionIndex]]))
                    dataArrayPercent.push(parseFloat((data[d][allGroup[selectionIndex]]/data[d].Population*100)))
                    totalPopInit = totalPopInit + data[d][allGroup[0]]

                }
                var selected = d3.select("#selectButton").property("value")
                if (selected == "Percent of Population") {
                    var minVal = d3.min(dataArray)
                    var maxVal = d3.max(dataArray)
                }
                else if (selected != "Percent of Population") {
                    var minVal = d3.min(dataArrayPercent)
                    var maxVal = d3.max(dataArrayPercent)
                }             
                var ramp = d3.scaleLinear().domain([minVal, maxVal]).range([lowColor, highColor])
                // Load GeoJSON data and merge with synthetic states data
                d3.json("../Content/us-states.json", function (json) {
                    var totalPop = 0;
                    // Loop through each state data value in the .csv file
                    for (var i = 0; i < data.length; i++) {
                        
                        // Grab State Name
                        var dataState = data[i].State;
                        totalPop = totalPop + data[i].Population;
                        // Grab data value
                        var dataValue = data[i][allGroup[selectionIndex]];

                        // Find the corresponding state inside the GeoJSON
                        for (var j = 0; j < json.features.length; j++) {
                            var jsonState = json.features[j].id;

                            if (dataState == jsonState) {

                                // Copy the data value into the JSON
                                json.features[j].properties.value = dataValue;
                                json.features[j].properties.statePop = data[i].Population;
                                // Stop looking through the JSON
                                break;
                            }
                        }
                    }
                    var Tooltip = d3.select("#mapGenerated")
                        .append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 1)
                        .style("background-color", "white")
                        .style("border", "solid")
                        .style("border-width", "1px")
                        .style("border-radius", "5px")
                        .style("padding", "5px")

                    // Three function that change the tooltip when user hover / move / leave a cell
                    var mouseover = function (d) {
                        Tooltip.style("opacity", 1)
                    }
                    var mousemove = function (d) {
                        var selected = d3.select("#selectButton").property("value")
                        if (selected == "Percent of Population") {
                            Tooltip
                                .html(d.properties.name + "<br> " + selected + ": " + (((d.properties.value / totalPop) * 100).toFixed(2) + "%"))
                                .style("left", (d3.mouse(this)[0] + 750) + "px")
                                .style("top", (d3.mouse(this)[1] - 5) + "px")
                        }
                        else if (selected != "Percent of Population") {
                            Tooltip
                                .html(d.properties.name + "<br> " + selected + ": " + (((d.properties.value / d.properties.statePop) * 100).toFixed(2) + "%"))
                                .style("left", (d3.mouse(this)[0] + 750) + "px")
                                .style("top", (d3.mouse(this)[1] - 5) + "px")
                        }
                    }
                    var mouseleave = function (d) {
                        Tooltip.style("opacity", 0)
                    }
                    // Bind the data to the SVG and create one path per GeoJSON feature
                    svgGen.selectAll("pathGen")
                        .data(json.features)
                        .enter()
                        .append("path")
                        .attr("d", pathGen)
                        .style("stroke", "#fff")
                        .style("stroke-width", "1")
                        .style("fill", function (d) {
                            var selected = d3.select("#selectButton").property("value")
                            if (selected == "Percent of Population") {
                                return ramp(d.properties.value)
                            }
                            else if (selected != "Percent of Population") {
                                return ramp(((d.properties.value / d.properties.statePop) * 100))
                            }
                            

                        })
                        .on("mouseover", mouseover)
                        .on("mousemove", mousemove)
                        .on("mouseleave", mouseleave);


                });
            });


            
            
        }

        // When the button is changed, run the updateChart function
        d3.select("#selectButton").on("change", function (d) {
            // recover the option that has been chosen
            var selectedOption = d3.select(this).property("value")
            // run the updateChart function with this selected option
            update(selectedOption)
        });

    </script>

